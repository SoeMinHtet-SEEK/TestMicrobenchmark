name: Performance Benchmarks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29-final

      - name: Create AVD
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: false
          script: echo "Generated AVD snapshot"

      - name: Run Benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            echo "ðŸš€ Starting benchmark execution..."
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            echo "ðŸ“± Running benchmarks..."
            ./gradlew :benchmark:connectedReleaseAndroidTest --continue --stacktrace
            echo "âœ… Benchmark execution completed"

      - name: Generate Benchmark Report
        if: always()
        run: |
          echo "ðŸ“Š Generating benchmark report..."
          ./gradlew :benchmark:generateBenchmarkReport --stacktrace

      - name: Display Results
        if: always()
        run: |
          echo "ðŸ“Š Benchmark Results:"
          cat benchmark-results.json 2>/dev/null || echo "No results file found"

      - name: Create Benchmark Dashboard
        if: always() && github.ref == 'refs/heads/main'
        run: |
          # Create a simple HTML dashboard
          mkdir -p benchmark-dashboard
          cat > benchmark-dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Performance Benchmarks</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      margin: 0; 
                      padding: 20px; 
                      background-color: #f5f5f5; 
                  }
                  .container { 
                      max-width: 1000px; 
                      margin: 0 auto; 
                      background: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #333; 
                      text-align: center; 
                      margin-bottom: 30px;
                      border-bottom: 2px solid #007acc;
                      padding-bottom: 10px;
                  }
                  .benchmark-item { 
                      margin: 20px 0; 
                      padding: 20px; 
                      border: 1px solid #e0e0e0; 
                      border-radius: 8px; 
                      background: #fafafa;
                  }
                  .benchmark-name { 
                      font-size: 18px; 
                      font-weight: bold; 
                      color: #333; 
                      margin-bottom: 10px;
                  }
                  .benchmark-value { 
                      font-size: 32px; 
                      font-weight: bold; 
                      color: #007acc; 
                  }
                  .benchmark-unit { 
                      color: #666; 
                      font-size: 20px;
                  }
                  .chart-container {
                      margin-top: 40px;
                      padding: 20px;
                      background: #fafafa;
                      border-radius: 8px;
                  }
                  .timestamp {
                      text-align: center;
                      color: #666;
                      font-size: 14px;
                      margin-top: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸ“Š Performance Benchmarks Dashboard</h1>
                  <div id="benchmarks"></div>
                  <div class="chart-container">
                      <canvas id="chart" width="400" height="200"></canvas>
                  </div>
                  <div class="timestamp" id="timestamp"></div>
              </div>
              <script>
                  // Load benchmark data
                  fetch('benchmark-results.json')
                      .then(response => response.json())
                      .then(data => {
                          const container = document.getElementById('benchmarks');
          
                          if (data.length === 0) {
                              container.innerHTML = '<div class="benchmark-item">No benchmark results found</div>';
                              return;
                          }
          
                          data.forEach(benchmark => {
                              const div = document.createElement('div');
                              div.className = 'benchmark-item';
                              div.innerHTML = `
                                  <div class="benchmark-name">${benchmark.name}</div>
                                  <div class="benchmark-value">${benchmark.value.toFixed(3)} <span class="benchmark-unit">${benchmark.unit}</span></div>
                              `;
                              container.appendChild(div);
                          });
          
                          // Create chart
                          const ctx = document.getElementById('chart').getContext('2d');
                          new Chart(ctx, {
                              type: 'bar',
                              data: {
                                  labels: data.map(b => b.name.replace(/.*\./, '')), // Remove class prefix
                                  datasets: [{
                                      label: `Performance (${data[0]?.unit || 'Î¼s'})`,
                                      data: data.map(b => b.value),
                                      backgroundColor: 'rgba(0, 122, 204, 0.2)',
                                      borderColor: 'rgba(0, 122, 204, 1)',
                                      borderWidth: 2
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  scales: {
                                      y: { 
                                          beginAtZero: true,
                                          title: {
                                              display: true,
                                              text: `Time (${data[0]?.unit || 'Î¼s'})`
                                          }
                                      },
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Benchmark Tests'
                                          }
                                      }
                                  },
                                  plugins: {
                                      title: {
                                          display: true,
                                          text: 'Benchmark Performance Results'
                                      }
                                  }
                              }
                          });
          
                          // Show timestamp
                          document.getElementById('timestamp').innerHTML = `Last updated: ${new Date().toLocaleString()}`;
                      })
                      .catch(error => {
                          console.error('Error loading benchmark data:', error);
                          document.getElementById('benchmarks').innerHTML = '<div class="benchmark-item">Error loading benchmark results</div>';
                      });
              </script>
          </body>
          </html>
          EOF
          
          # Copy benchmark results
          cp benchmark-results.json benchmark-dashboard/
          
          echo "ðŸ“Š Created benchmark dashboard"
          ls -la benchmark-dashboard/

      - name: Deploy to GitHub Pages
        if: always() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./benchmark-dashboard
          commit_message: 'Update benchmark dashboard'
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Upload benchmark artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: |
            benchmark-results.json
            benchmark-dashboard/
            benchmark/build/outputs/connected_android_test_additional_output/