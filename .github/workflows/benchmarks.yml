name: Performance Benchmarks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git commands

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Get device info
        id: device-info
        run: |
          echo "DEVICE_MODEL=Nexus_6_API_29" >> $GITHUB_ENV
          echo "DEVICE_BRAND=generic" >> $GITHUB_ENV

      - name: Run Benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -no-snapshot
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            echo "🚀 Starting benchmark execution..."
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            echo "📱 Running benchmarks..."
            ./gradlew :benchmark:connectedReleaseAndroidTest --continue --stacktrace || true
            echo "✅ Benchmark execution completed"

      - name: Generate Benchmark Report
        if: always()
        run: |
          echo "📊 Generating benchmark report..."
          ./gradlew :benchmark:generateBenchmarkReport --stacktrace

      - name: Display Results
        if: always()
        run: |
          echo "📊 Benchmark Results:"
          cat benchmark-results.json 2>/dev/null || echo "No results file found"

      - name: Setup Python
        if: always() && github.ref == 'refs/heads/main'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        if: always() && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Installing Python dependencies..."
          pip install -q prometheus-client requests python-snappy

      - name: Push to Grafana Cloud
        if: always() && github.ref == 'refs/heads/main'
        env:
          GRAFANA_URL: ${{ secrets.GRAFANA_PROMETHEUS_URL }}
          GRAFANA_USER: ${{ secrets.GRAFANA_PROMETHEUS_USER }}
          GRAFANA_TOKEN: ${{ secrets.GRAFANA_PROMETHEUS_TOKEN }}
        run: |
          echo "📊 Pushing benchmark results to Grafana Cloud..."
          
          # Check if benchmark results exist
          if [ ! -f "benchmark-results.json" ]; then
            echo "❌ benchmark-results.json not found"
            exit 1
          fi
          
          # Check if secrets are set
          if [ -z "$GRAFANA_URL" ] || [ -z "$GRAFANA_USER" ] || [ -z "$GRAFANA_TOKEN" ]; then
            echo "⚠️ Grafana secrets not configured. Skipping push."
            exit 0
          fi
          
          # Make scripts executable
          chmod +x scripts/push_to_grafana.py
          chmod +x scripts/push_with_remote_write.py
          
          # Generate metrics files
          echo "📈 Generating metrics..."
          python3 scripts/push_to_grafana.py benchmark-results.json
          
          # Try to push with remote write
          echo ""
          echo "🚀 Attempting to push to Grafana Cloud..."
          python3 scripts/push_with_remote_write.py benchmark-results.json
          
          echo ""
          echo "📊 Metrics files generated:"
          ls -lh metrics*.txt 2>/dev/null || true

      - name: Upload benchmark artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: |
            benchmark-results.json
            metrics*.txt
            benchmark/build/outputs/connected_android_test_additional_output/
