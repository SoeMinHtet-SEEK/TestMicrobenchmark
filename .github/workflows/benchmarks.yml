name: Performance Benchmarks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git commands

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Get device info
        id: device-info
        run: |
          echo "DEVICE_MODEL=Nexus_6_API_29" >> $GITHUB_ENV
          echo "DEVICE_BRAND=generic" >> $GITHUB_ENV

      - name: Run Benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -no-snapshot
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            echo "üöÄ Starting benchmark execution..."
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            echo "üì± Running benchmarks..."
            ./gradlew :benchmark:connectedReleaseAndroidTest --continue --stacktrace || true
            echo "‚úÖ Benchmark execution completed"

      - name: Generate Benchmark Report
        if: always()
        run: |
          echo "üìä Generating benchmark report..."
          ./gradlew :benchmark:generateBenchmarkReport --stacktrace

      - name: Display Results
        if: always()
        run: |
          echo "üìä Benchmark Results:"
          cat benchmark-results.json 2>/dev/null || echo "No results file found"

      - name: Setup Python
        if: always() && github.ref == 'refs/heads/main'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Push to Grafana Cloud
        if: always() && github.ref == 'refs/heads/main'
        env:
          GRAFANA_URL: ${{ secrets.GRAFANA_PROMETHEUS_URL }}
          GRAFANA_USER: ${{ secrets.GRAFANA_PROMETHEUS_USER }}
          GRAFANA_TOKEN: ${{ secrets.GRAFANA_PROMETHEUS_TOKEN }}
        run: |
          echo "üìä Pushing benchmark results to Grafana Cloud..."
          
          # Check if benchmark results exist
          if [ ! -f "benchmark-results.json" ]; then
            echo "‚ùå benchmark-results.json not found"
            exit 1
          fi
          
          # Check if secrets are set
          if [ -z "$GRAFANA_URL" ] || [ -z "$GRAFANA_USER" ] || [ -z "$GRAFANA_TOKEN" ]; then
            echo "‚ö†Ô∏è Grafana secrets not configured. Skipping push."
            exit 0
          fi
          
          # Make script executable
          chmod +x scripts/push_to_grafana.py
          
          # Parse benchmark results and generate metrics
          python3 scripts/push_to_grafana.py benchmark-results.json
          
          # Check if metrics were generated
          if [ ! -f "metrics.txt" ]; then
            echo "‚ùå metrics.txt not generated"
            exit 1
          fi
          
          echo "üìà Metrics to push:"
          cat metrics.txt
          echo ""
          
          # Push to Grafana Cloud Prometheus
          echo "üöÄ Pushing to Grafana Cloud..."
          echo "Endpoint: $GRAFANA_URL"
          echo "User: $GRAFANA_USER"
          echo ""
          
          # Try pushing with proper error handling
          HTTP_CODE=$(curl -w "%{http_code}" -o response.txt \
            --user "$GRAFANA_USER:$GRAFANA_TOKEN" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -X POST \
            --data-binary @metrics.txt \
            "$GRAFANA_URL" 2>&1 | tail -n1)
          
          echo "HTTP Response Code: $HTTP_CODE"
          
          if [ -f response.txt ]; then
            echo "Response body:"
            cat response.txt
            echo ""
          fi
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 204 ] || [ "$HTTP_CODE" -eq 202 ]; then
            echo "‚úÖ Successfully pushed metrics to Grafana Cloud!"
          else
            echo "‚ö†Ô∏è Failed to push metrics. HTTP Code: $HTTP_CODE"
            echo ""
            echo "Debug information:"
            echo "- Endpoint: $GRAFANA_URL"
            echo "- Metrics count: $(wc -l < metrics.txt) lines"
            echo "- First metric: $(head -n1 metrics.txt)"
            echo ""
            echo "Common issues:"
            echo "1. Verify your Grafana Cloud credentials are correct"
            echo "2. Check that the instance ID (user) matches your Grafana Cloud setup"
            echo "3. Ensure the API token has write permissions for Prometheus"
            echo "4. Try regenerating your API token in Grafana Cloud"
            echo ""
            echo "Note: Grafana push failed but workflow will continue..."
            # Don't fail the workflow for Grafana push issues
          fi

      - name: Create Benchmark Dashboard
        if: always() && github.ref == 'refs/heads/main'
        run: |
          # Create a simple HTML dashboard
          mkdir -p benchmark-dashboard
          cat > benchmark-dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Performance Benchmarks</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      margin: 0; 
                      padding: 20px; 
                      background-color: #f5f5f5; 
                  }
                  .container { 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      background: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #333; 
                      text-align: center; 
                      margin-bottom: 30px;
                      border-bottom: 2px solid #007acc;
                      padding-bottom: 10px;
                  }
                  .info-box {
                      background: #f0f8ff;
                      padding: 15px;
                      border-radius: 5px;
                      margin-bottom: 20px;
                      border-left: 4px solid #007acc;
                  }
                  .benchmark-item { 
                      margin: 20px 0; 
                      padding: 20px; 
                      border: 1px solid #e0e0e0; 
                      border-radius: 8px; 
                      background: #fafafa;
                  }
                  .benchmark-name { 
                      font-size: 18px; 
                      font-weight: bold; 
                      color: #333; 
                      margin-bottom: 10px;
                  }
                  .benchmark-value { 
                      font-size: 24px; 
                      font-weight: bold; 
                      color: #007acc; 
                  }
                  .benchmark-allocations {
                      font-size: 16px;
                      color: #666;
                      margin-top: 5px;
                  }
                  .chart-container {
                      margin-top: 40px;
                      padding: 20px;
                      background: #fafafa;
                      border-radius: 8px;
                  }
                  .timestamp {
                      text-align: center;
                      color: #666;
                      font-size: 14px;
                      margin-top: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üìä Performance Benchmarks Dashboard</h1>
                  <div class="info-box" id="metadata"></div>
                  <div id="benchmarks"></div>
                  <div class="chart-container">
                      <h2>Execution Time</h2>
                      <canvas id="timeChart" width="400" height="200"></canvas>
                  </div>
                  <div class="chart-container">
                      <h2>Memory Allocations</h2>
                      <canvas id="allocChart" width="400" height="200"></canvas>
                  </div>
                  <div class="timestamp" id="timestamp"></div>
              </div>
              <script>
                  fetch('benchmark-results.json')
                      .then(response => response.json())
                      .then(data => {
                          // Show metadata
                          const metadata = document.getElementById('metadata');
                          metadata.innerHTML = `
                              <strong>Commit:</strong> ${data.gitCommit} | 
                              <strong>Device:</strong> ${data.device} | 
                              <strong>Brand:</strong> ${data.brand}
                          `;

                          const container = document.getElementById('benchmarks');
                          const benchmarks = data.benchmarks || [];
          
                          if (benchmarks.length === 0) {
                              container.innerHTML = '<div class="benchmark-item">No benchmark results found</div>';
                              return;
                          }
          
                          benchmarks.forEach(benchmark => {
                              const div = document.createElement('div');
                              div.className = 'benchmark-item';
                              const timeMs = (benchmark.medianTimeNs / 1000000).toFixed(3);
                              div.innerHTML = `
                                  <div class="benchmark-name">${benchmark.testName}</div>
                                  <div class="benchmark-value">${timeMs} ms</div>
                                  <div class="benchmark-allocations">
                                      Allocations: ${benchmark.medianAllocationCount} | 
                                      Iterations: ${benchmark.iterations}
                                  </div>
                              `;
                              container.appendChild(div);
                          });
          
                          // Time chart
                          const timeCtx = document.getElementById('timeChart').getContext('2d');
                          new Chart(timeCtx, {
                              type: 'bar',
                              data: {
                                  labels: benchmarks.map(b => b.testName.replace(/.*\./, '')),
                                  datasets: [{
                                      label: 'Time (ms)',
                                      data: benchmarks.map(b => b.medianTimeNs / 1000000),
                                      backgroundColor: 'rgba(0, 122, 204, 0.2)',
                                      borderColor: 'rgba(0, 122, 204, 1)',
                                      borderWidth: 2
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  scales: {
                                      y: { 
                                          beginAtZero: true,
                                          title: { display: true, text: 'Time (ms)' }
                                      }
                                  }
                              }
                          });

                          // Allocation chart
                          const allocCtx = document.getElementById('allocChart').getContext('2d');
                          new Chart(allocCtx, {
                              type: 'bar',
                              data: {
                                  labels: benchmarks.map(b => b.testName.replace(/.*\./, '')),
                                  datasets: [{
                                      label: 'Allocations',
                                      data: benchmarks.map(b => b.medianAllocationCount),
                                      backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                      borderColor: 'rgba(255, 99, 132, 1)',
                                      borderWidth: 2
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  scales: {
                                      y: { 
                                          beginAtZero: true,
                                          title: { display: true, text: 'Allocations' }
                                      }
                                  }
                              }
                          });
          
                          document.getElementById('timestamp').innerHTML = `Last updated: ${new Date(data.timestamp).toLocaleString()}`;
                      })
                      .catch(error => {
                          console.error('Error loading benchmark data:', error);
                          document.getElementById('benchmarks').innerHTML = '<div class="benchmark-item">Error loading benchmark results</div>';
                      });
              </script>
          </body>
          </html>
          EOF
          
          # Copy benchmark results
          cp benchmark-results.json benchmark-dashboard/
          
          echo "üìä Created benchmark dashboard"
          ls -la benchmark-dashboard/

      - name: Deploy to GitHub Pages
        if: always() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./benchmark-dashboard
          commit_message: 'Update benchmark dashboard'
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Upload benchmark artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: |
            benchmark-results.json
            metrics.txt
            benchmark-dashboard/
            benchmark/build/outputs/connected_android_test_additional_output/
