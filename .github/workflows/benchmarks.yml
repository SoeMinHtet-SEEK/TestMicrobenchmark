name: Performance Benchmarks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  benchmarks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git commands

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Get device info
        id: device-info
        run: |
          echo "DEVICE_MODEL=Nexus_6_API_29" >> $GITHUB_ENV
          echo "DEVICE_BRAND=generic" >> $GITHUB_ENV

      - name: Run Benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -no-snapshot
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            echo "🚀 Starting benchmark execution..."
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            echo "📱 Running benchmarks..."
            ./gradlew :benchmark:connectedReleaseAndroidTest --continue --stacktrace || true
            echo "✅ Benchmark execution completed"

      - name: Generate Benchmark Report
        if: always()
        run: |
          echo "📊 Generating benchmark report..."
          ./gradlew :benchmark:generateBenchmarkReport --stacktrace

      - name: Display Results
        if: always()
        run: |
          echo "📊 Benchmark Results:"
          cat benchmark-results.json 2>/dev/null || echo "No results file found"

      - name: Setup Python
        if: always() && github.ref == 'refs/heads/main'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Grafana Alloy
        if: always() && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Installing Grafana Alloy (official remote write tool)..."
          
          # Add Grafana APT repository
          sudo mkdir -p /etc/apt/keyrings/
          wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
          
          sudo apt-get update
          sudo apt-get install -y alloy
          
          echo "✅ Alloy installed: $(alloy --version)"

      - name: Push to Grafana Cloud
        if: always() && github.ref == 'refs/heads/main'
        env:
          GRAFANA_URL: ${{ secrets.GRAFANA_PROMETHEUS_URL }}
          GRAFANA_USER: ${{ secrets.GRAFANA_PROMETHEUS_USER }}
          GRAFANA_TOKEN: ${{ secrets.GRAFANA_PROMETHEUS_TOKEN }}
        run: |
          echo "📊 Pushing benchmark results to Grafana Cloud..."
          
          # Check if benchmark results exist
          if [ ! -f "benchmark-results.json" ]; then
            echo "❌ benchmark-results.json not found"
            exit 1
          fi
          
          # Check if secrets are set
          if [ -z "$GRAFANA_URL" ] || [ -z "$GRAFANA_USER" ] || [ -z "$GRAFANA_TOKEN" ]; then
            echo "⚠️ Grafana secrets not configured. Skipping push."
            exit 0
          fi
          
          # Generate metrics in Prometheus format
          echo "📈 Generating metrics..."
          chmod +x scripts/push_to_grafana.py
          python3 scripts/push_to_grafana.py benchmark-results.json
          
          echo ""
          echo "🚀 Setting up Alloy to push metrics..."
          
          # Create Alloy configuration for remote write
          cat > alloy-config.alloy << 'EOF'
          // Expose a local endpoint that accepts Prometheus metrics
          prometheus.receive_http "benchmark_receiver" {
            http {
              listen_address = "127.0.0.1"
              listen_port    = 9090
            }
            
            forward_to = [prometheus.remote_write.grafana_cloud.receiver]
          }
          
          // Configure remote write to Grafana Cloud
          prometheus.remote_write "grafana_cloud" {
            endpoint {
              url = env("GRAFANA_URL")
              
              basic_auth {
                username = env("GRAFANA_USER")
                password = env("GRAFANA_TOKEN")
              }
              
              queue_config {
                capacity = 10000
                max_shards = 1
              }
            }
          }
          EOF
          
          echo "✅ Alloy configuration created"
          
          # Start Alloy in background
          echo "🚀 Starting Alloy..."
          alloy run alloy-config.alloy > alloy.log 2>&1 &
          ALLOY_PID=$!
          
          # Wait for Alloy to start
          echo "⏳ Waiting for Alloy to initialize..."
          sleep 8
          
          # Check if Alloy is running
          if ! kill -0 $ALLOY_PID 2>/dev/null; then
            echo "❌ Alloy failed to start. Check logs:"
            cat alloy.log
            exit 1
          fi
          
          echo "✅ Alloy is running (PID: $ALLOY_PID)"
          
          # Convert our text metrics to the write request and push to Alloy
          echo ""
          echo "📤 Pushing metrics through Alloy to Grafana Cloud..."
          
          # Post metrics to Alloy's receive endpoint
          HTTP_CODE=$(curl -w "%{http_code}" -o response.txt -s \
            -X POST \
            -H "Content-Type: application/x-protobuf" \
            -H "X-Prometheus-Remote-Write-Version: 0.1.0" \
            --data-binary @metrics.txt \
            http://127.0.0.1:9090/api/v1/write 2>&1 | tail -n1)
          
          echo "   Response code: $HTTP_CODE"
          
          if [ -f response.txt ]; then
            cat response.txt
          fi
          
          # Give Alloy time to flush to Grafana Cloud
          echo ""
          echo "⏳ Waiting for metrics to be sent to Grafana Cloud..."
          sleep 10
          
          # Check Alloy logs for success
          echo ""
          echo "📋 Alloy activity log:"
          if grep -i "error" alloy.log; then
            echo "⚠️  Errors detected in Alloy logs"
          else
            echo "✅ No errors in Alloy logs"
          fi
          
          # Stop Alloy
          echo ""
          echo "🛑 Stopping Alloy..."
          kill $ALLOY_PID 2>/dev/null || true
          sleep 2
          
          # Show final log excerpt
          echo ""
          echo "📊 Final Alloy log excerpt:"
          tail -n 30 alloy.log
          
          echo ""
          echo "✅ Metrics push completed!"
          echo "📊 Check your Grafana Cloud dashboard for 'android_benchmark_*' metrics"

      - name: Upload benchmark artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: |
            benchmark-results.json
            metrics*.txt
            benchmark/build/outputs/connected_android_test_additional_output/
